@startuml
package facade {

    Interface PresentationServices
    Abstract Class Presentation
    PresentationServices : startPresentation()
    PresentationServices : stopPresentation()
    PresentationServices : navigateSlide(direction)
    Presentation .up.|> PresentationServices
    SimplePresentation -up-|> Presentation
}


package bridge {

    package style {
        Interface Style
        Level1 -up-|> Style
        Level2 -up-|> Style
        Level3 -up-|> Style
        Level4 -up-|> Style

    }

    package composite {

        Abstract Class Item

        Text .up.|> Item
        Figure .up.|> Item
        Table .up.|> Item
        Composite .up.|> Item
        Composite -up-> "*" Item

        Item -right-> Style

    }

}



package iterator {

    Interface SlideShow
    Interface Iterator

    Iterator : first()
    Iterator : next(direction)



    SlideShowImpl .up.|> SlideShow
    SlideIterator -up-|> Iterator
    Slide -down-> "*" Item
    SlideShowImpl -down-> SlideList
    SlideShowImpl -left-> Iterator
    SlideList -left-> SlideIterator
    SlideList --> "*" Slide

    SlideShow : navigateSlide(direction)

    SlideList : getIterator()




}

package strategy {

    abstract class SlideNavigateRule
    SlideNavigateRule : canNavigate(from,to)
    SlideShowImpl -right-> SlideNavigateRule

    class LiniairSlideNavigateRule
    LiniairSlideNavigateRule -up-|> SlideNavigateRule 

    class CubicSlideNavigateRule
    CubicSlideNavigateRule-up-|> SlideNavigateRule 

    class GridSlideNavigateRule
    GridSlideNavigateRule-up-|> SlideNavigateRule 

    Interface Transition
    Transition : Start()

    SlideShowImpl -right-> "*" Transition

    SlideTransition -up-|> Transition
    TwistTransition -up-|> Transition
    fadeTransition -up-|> Transition



}


SimplePresentation --> SlideShow
@enduml
